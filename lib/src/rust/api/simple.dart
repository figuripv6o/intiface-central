// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.0.0-dev.30.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../frb_generated.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

// The type `BACKDOOR_INCOMING_BROADCASTER` is not used by any `pub` functions, thus it is ignored.
// The type `ENGINE_BROADCASTER` is not used by any `pub` functions, thus it is ignored.
// The type `LOGGER` is not used by any `pub` functions, thus it is ignored.
// The type `RUNTIME` is not used by any `pub` functions, thus it is ignored.
// The type `RUN_STATUS` is not used by any `pub` functions, thus it is ignored.

Future<bool> runtimeStarted({dynamic hint}) =>
    RustLib.instance.api.runtimeStarted(hint: hint);

Stream<String> runEngine({required EngineOptionsExternal args, dynamic hint}) =>
    RustLib.instance.api.runEngine(args: args, hint: hint);

Future<void> send({required String msgJson, dynamic hint}) =>
    RustLib.instance.api.send(msgJson: msgJson, hint: hint);

Future<void> stopEngine({dynamic hint}) =>
    RustLib.instance.api.stopEngine(hint: hint);

Future<void> sendBackendServerMessage({required String msg, dynamic hint}) =>
    RustLib.instance.api.sendBackendServerMessage(msg: msg, hint: hint);

Future<ExposedUserConfig> getUserDeviceConfigs(
        {required String deviceConfigJson,
        required String userConfigJson,
        dynamic hint}) =>
    RustLib.instance.api.getUserDeviceConfigs(
        deviceConfigJson: deviceConfigJson,
        userConfigJson: userConfigJson,
        hint: hint);

Future<String> generateUserDeviceConfigFile(
        {required ExposedUserConfig userConfig, dynamic hint}) =>
    RustLib.instance.api
        .generateUserDeviceConfigFile(userConfig: userConfig, hint: hint);

Future<List<String>> getProtocolNames({dynamic hint}) =>
    RustLib.instance.api.getProtocolNames(hint: hint);

Stream<String> setupLogging({dynamic hint}) =>
    RustLib.instance.api.setupLogging(hint: hint);

Future<void> shutdownLogging({dynamic hint}) =>
    RustLib.instance.api.shutdownLogging(hint: hint);

Future<void> crashReporting({required String sentryApiKey, dynamic hint}) =>
    RustLib.instance.api.crashReporting(sentryApiKey: sentryApiKey, hint: hint);

Future<Map<ProtocolAttributesIdentifier, ProtocolDeviceFeatures>>
    getUserConfigs({dynamic hint}) =>
        RustLib.instance.api.getUserConfigs(hint: hint);

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::rust_async::RwLock<ProtocolAttributesIdentifier>>
@sealed
class ProtocolAttributesIdentifier extends RustOpaque {
  ProtocolAttributesIdentifier.dcoDecode(List<dynamic> wire)
      : super.dcoDecode(wire, _kStaticData);

  ProtocolAttributesIdentifier.sseDecode(int ptr, int externalSizeOnNative)
      : super.sseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: RustLib.instance.api
        .rust_arc_increment_strong_count_ProtocolAttributesIdentifier,
    rustArcDecrementStrongCount: RustLib.instance.api
        .rust_arc_decrement_strong_count_ProtocolAttributesIdentifier,
    rustArcDecrementStrongCountPtr: RustLib.instance.api
        .rust_arc_decrement_strong_count_ProtocolAttributesIdentifierPtr,
  );
}

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::rust_async::RwLock<ProtocolDeviceFeatures>>
@sealed
class ProtocolDeviceFeatures extends RustOpaque {
  ProtocolDeviceFeatures.dcoDecode(List<dynamic> wire)
      : super.dcoDecode(wire, _kStaticData);

  ProtocolDeviceFeatures.sseDecode(int ptr, int externalSizeOnNative)
      : super.sseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: RustLib
        .instance.api.rust_arc_increment_strong_count_ProtocolDeviceFeatures,
    rustArcDecrementStrongCount: RustLib
        .instance.api.rust_arc_decrement_strong_count_ProtocolDeviceFeatures,
    rustArcDecrementStrongCountPtr: RustLib
        .instance.api.rust_arc_decrement_strong_count_ProtocolDeviceFeaturesPtr,
  );
}

class EngineOptionsExternal {
  final String? deviceConfigJson;
  final String? userDeviceConfigJson;
  final String serverName;
  final bool websocketUseAllInterfaces;
  final int? websocketPort;
  final int? frontendWebsocketPort;
  final bool frontendInProcessChannel;
  final int maxPingTime;
  final bool allowRawMessages;
  final bool useBluetoothLe;
  final bool useSerialPort;
  final bool useHid;
  final bool useLovenseDongleSerial;
  final bool useLovenseDongleHid;
  final bool useXinput;
  final bool useLovenseConnect;
  final bool useDeviceWebsocketServer;
  final int? deviceWebsocketServerPort;
  final bool crashMainThread;
  final bool crashTaskThread;
  final String? websocketClientAddress;
  final bool broadcastServerMdns;
  final String? mdnsSuffix;
  final bool repeaterMode;
  final int? repeaterLocalPort;
  final String? repeaterRemoteAddress;

  const EngineOptionsExternal({
    this.deviceConfigJson,
    this.userDeviceConfigJson,
    required this.serverName,
    required this.websocketUseAllInterfaces,
    this.websocketPort,
    this.frontendWebsocketPort,
    required this.frontendInProcessChannel,
    required this.maxPingTime,
    required this.allowRawMessages,
    required this.useBluetoothLe,
    required this.useSerialPort,
    required this.useHid,
    required this.useLovenseDongleSerial,
    required this.useLovenseDongleHid,
    required this.useXinput,
    required this.useLovenseConnect,
    required this.useDeviceWebsocketServer,
    this.deviceWebsocketServerPort,
    required this.crashMainThread,
    required this.crashTaskThread,
    this.websocketClientAddress,
    required this.broadcastServerMdns,
    this.mdnsSuffix,
    required this.repeaterMode,
    this.repeaterLocalPort,
    this.repeaterRemoteAddress,
  });

  @override
  int get hashCode =>
      deviceConfigJson.hashCode ^
      userDeviceConfigJson.hashCode ^
      serverName.hashCode ^
      websocketUseAllInterfaces.hashCode ^
      websocketPort.hashCode ^
      frontendWebsocketPort.hashCode ^
      frontendInProcessChannel.hashCode ^
      maxPingTime.hashCode ^
      allowRawMessages.hashCode ^
      useBluetoothLe.hashCode ^
      useSerialPort.hashCode ^
      useHid.hashCode ^
      useLovenseDongleSerial.hashCode ^
      useLovenseDongleHid.hashCode ^
      useXinput.hashCode ^
      useLovenseConnect.hashCode ^
      useDeviceWebsocketServer.hashCode ^
      deviceWebsocketServerPort.hashCode ^
      crashMainThread.hashCode ^
      crashTaskThread.hashCode ^
      websocketClientAddress.hashCode ^
      broadcastServerMdns.hashCode ^
      mdnsSuffix.hashCode ^
      repeaterMode.hashCode ^
      repeaterLocalPort.hashCode ^
      repeaterRemoteAddress.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is EngineOptionsExternal &&
          runtimeType == other.runtimeType &&
          deviceConfigJson == other.deviceConfigJson &&
          userDeviceConfigJson == other.userDeviceConfigJson &&
          serverName == other.serverName &&
          websocketUseAllInterfaces == other.websocketUseAllInterfaces &&
          websocketPort == other.websocketPort &&
          frontendWebsocketPort == other.frontendWebsocketPort &&
          frontendInProcessChannel == other.frontendInProcessChannel &&
          maxPingTime == other.maxPingTime &&
          allowRawMessages == other.allowRawMessages &&
          useBluetoothLe == other.useBluetoothLe &&
          useSerialPort == other.useSerialPort &&
          useHid == other.useHid &&
          useLovenseDongleSerial == other.useLovenseDongleSerial &&
          useLovenseDongleHid == other.useLovenseDongleHid &&
          useXinput == other.useXinput &&
          useLovenseConnect == other.useLovenseConnect &&
          useDeviceWebsocketServer == other.useDeviceWebsocketServer &&
          deviceWebsocketServerPort == other.deviceWebsocketServerPort &&
          crashMainThread == other.crashMainThread &&
          crashTaskThread == other.crashTaskThread &&
          websocketClientAddress == other.websocketClientAddress &&
          broadcastServerMdns == other.broadcastServerMdns &&
          mdnsSuffix == other.mdnsSuffix &&
          repeaterMode == other.repeaterMode &&
          repeaterLocalPort == other.repeaterLocalPort &&
          repeaterRemoteAddress == other.repeaterRemoteAddress;
}

class ExposedUserConfig {
  final List<(String, ExposedUserDeviceSpecifiers)> specifiers;
  final List<ExposedUserDeviceConfig> configurations;

  const ExposedUserConfig({
    required this.specifiers,
    required this.configurations,
  });

  @override
  int get hashCode => specifiers.hashCode ^ configurations.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is ExposedUserConfig &&
          runtimeType == other.runtimeType &&
          specifiers == other.specifiers &&
          configurations == other.configurations;
}

class ExposedUserDeviceConfig {
  final UserConfigDeviceIdentifier identifier;
  final String name;
  final String? displayName;
  final bool? allow;
  final bool? deny;
  final int? reservedIndex;

  const ExposedUserDeviceConfig({
    required this.identifier,
    required this.name,
    this.displayName,
    this.allow,
    this.deny,
    this.reservedIndex,
  });

  @override
  int get hashCode =>
      identifier.hashCode ^
      name.hashCode ^
      displayName.hashCode ^
      allow.hashCode ^
      deny.hashCode ^
      reservedIndex.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is ExposedUserDeviceConfig &&
          runtimeType == other.runtimeType &&
          identifier == other.identifier &&
          name == other.name &&
          displayName == other.displayName &&
          allow == other.allow &&
          deny == other.deny &&
          reservedIndex == other.reservedIndex;
}

class ExposedUserDeviceSpecifiers {
  final ExposedWebsocketSpecifier? websocket;

  const ExposedUserDeviceSpecifiers({
    this.websocket,
  });

  @override
  int get hashCode => websocket.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is ExposedUserDeviceSpecifiers &&
          runtimeType == other.runtimeType &&
          websocket == other.websocket;
}

class ExposedWebsocketSpecifier {
  final List<String> names;

  const ExposedWebsocketSpecifier({
    required this.names,
  });

  @override
  int get hashCode => names.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is ExposedWebsocketSpecifier &&
          runtimeType == other.runtimeType &&
          names == other.names;
}

class UserConfigDeviceIdentifier {
  final String address;
  final String protocol;
  final String? identifier;

  const UserConfigDeviceIdentifier({
    required this.address,
    required this.protocol,
    this.identifier,
  });

  @override
  int get hashCode =>
      address.hashCode ^ protocol.hashCode ^ identifier.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is UserConfigDeviceIdentifier &&
          runtimeType == other.runtimeType &&
          address == other.address &&
          protocol == other.protocol &&
          identifier == other.identifier;
}
