// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.0.0-dev.30.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../frb_generated.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';
import 'simple.dart';

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::rust_async::RwLock<DeviceFeatureActuator>>
@sealed
class DeviceFeatureActuator extends RustOpaque {
  DeviceFeatureActuator.dcoDecode(List<dynamic> wire)
      : super.dcoDecode(wire, _kStaticData);

  DeviceFeatureActuator.sseDecode(int ptr, int externalSizeOnNative)
      : super.sseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: RustLib
        .instance.api.rust_arc_increment_strong_count_DeviceFeatureActuator,
    rustArcDecrementStrongCount: RustLib
        .instance.api.rust_arc_decrement_strong_count_DeviceFeatureActuator,
    rustArcDecrementStrongCountPtr: RustLib
        .instance.api.rust_arc_decrement_strong_count_DeviceFeatureActuatorPtr,
  );
}

class DeviceFeature {
  final String description;
  final FeatureType featureType;
  final DeviceFeatureActuator? actuator;
  final DeviceFeatureSensor? sensor;

  const DeviceFeature({
    required this.description,
    required this.featureType,
    this.actuator,
    this.sensor,
  });

  @override
  int get hashCode =>
      description.hashCode ^
      featureType.hashCode ^
      actuator.hashCode ^
      sensor.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is DeviceFeature &&
          runtimeType == other.runtimeType &&
          description == other.description &&
          featureType == other.featureType &&
          actuator == other.actuator &&
          sensor == other.sensor;
}

class DeviceFeatureSensor {
  final List<RangeInclusiveI32> valueRange;
  final Set<ButtplugDeviceMessageType> messages;

  const DeviceFeatureSensor({
    required this.valueRange,
    required this.messages,
  });

  @override
  int get hashCode => valueRange.hashCode ^ messages.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is DeviceFeatureSensor &&
          runtimeType == other.runtimeType &&
          valueRange == other.valueRange &&
          messages == other.messages;
}

class EngineOptionsExternal {
  final String? deviceConfigJson;
  final String? userDeviceConfigJson;
  final String serverName;
  final bool websocketUseAllInterfaces;
  final int? websocketPort;
  final int? frontendWebsocketPort;
  final bool frontendInProcessChannel;
  final int maxPingTime;
  final bool allowRawMessages;
  final bool useBluetoothLe;
  final bool useSerialPort;
  final bool useHid;
  final bool useLovenseDongleSerial;
  final bool useLovenseDongleHid;
  final bool useXinput;
  final bool useLovenseConnect;
  final bool useDeviceWebsocketServer;
  final int? deviceWebsocketServerPort;
  final bool crashMainThread;
  final bool crashTaskThread;
  final String? websocketClientAddress;
  final bool broadcastServerMdns;
  final String? mdnsSuffix;
  final bool repeaterMode;
  final int? repeaterLocalPort;
  final String? repeaterRemoteAddress;

  const EngineOptionsExternal({
    this.deviceConfigJson,
    this.userDeviceConfigJson,
    required this.serverName,
    required this.websocketUseAllInterfaces,
    this.websocketPort,
    this.frontendWebsocketPort,
    required this.frontendInProcessChannel,
    required this.maxPingTime,
    required this.allowRawMessages,
    required this.useBluetoothLe,
    required this.useSerialPort,
    required this.useHid,
    required this.useLovenseDongleSerial,
    required this.useLovenseDongleHid,
    required this.useXinput,
    required this.useLovenseConnect,
    required this.useDeviceWebsocketServer,
    this.deviceWebsocketServerPort,
    required this.crashMainThread,
    required this.crashTaskThread,
    this.websocketClientAddress,
    required this.broadcastServerMdns,
    this.mdnsSuffix,
    required this.repeaterMode,
    this.repeaterLocalPort,
    this.repeaterRemoteAddress,
  });

  @override
  int get hashCode =>
      deviceConfigJson.hashCode ^
      userDeviceConfigJson.hashCode ^
      serverName.hashCode ^
      websocketUseAllInterfaces.hashCode ^
      websocketPort.hashCode ^
      frontendWebsocketPort.hashCode ^
      frontendInProcessChannel.hashCode ^
      maxPingTime.hashCode ^
      allowRawMessages.hashCode ^
      useBluetoothLe.hashCode ^
      useSerialPort.hashCode ^
      useHid.hashCode ^
      useLovenseDongleSerial.hashCode ^
      useLovenseDongleHid.hashCode ^
      useXinput.hashCode ^
      useLovenseConnect.hashCode ^
      useDeviceWebsocketServer.hashCode ^
      deviceWebsocketServerPort.hashCode ^
      crashMainThread.hashCode ^
      crashTaskThread.hashCode ^
      websocketClientAddress.hashCode ^
      broadcastServerMdns.hashCode ^
      mdnsSuffix.hashCode ^
      repeaterMode.hashCode ^
      repeaterLocalPort.hashCode ^
      repeaterRemoteAddress.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is EngineOptionsExternal &&
          runtimeType == other.runtimeType &&
          deviceConfigJson == other.deviceConfigJson &&
          userDeviceConfigJson == other.userDeviceConfigJson &&
          serverName == other.serverName &&
          websocketUseAllInterfaces == other.websocketUseAllInterfaces &&
          websocketPort == other.websocketPort &&
          frontendWebsocketPort == other.frontendWebsocketPort &&
          frontendInProcessChannel == other.frontendInProcessChannel &&
          maxPingTime == other.maxPingTime &&
          allowRawMessages == other.allowRawMessages &&
          useBluetoothLe == other.useBluetoothLe &&
          useSerialPort == other.useSerialPort &&
          useHid == other.useHid &&
          useLovenseDongleSerial == other.useLovenseDongleSerial &&
          useLovenseDongleHid == other.useLovenseDongleHid &&
          useXinput == other.useXinput &&
          useLovenseConnect == other.useLovenseConnect &&
          useDeviceWebsocketServer == other.useDeviceWebsocketServer &&
          deviceWebsocketServerPort == other.deviceWebsocketServerPort &&
          crashMainThread == other.crashMainThread &&
          crashTaskThread == other.crashTaskThread &&
          websocketClientAddress == other.websocketClientAddress &&
          broadcastServerMdns == other.broadcastServerMdns &&
          mdnsSuffix == other.mdnsSuffix &&
          repeaterMode == other.repeaterMode &&
          repeaterLocalPort == other.repeaterLocalPort &&
          repeaterRemoteAddress == other.repeaterRemoteAddress;
}

enum FeatureType {
  unknown,
  vibrate,
  rotate,
  oscillate,
  constrict,
  inflate,
  position,
  battery,
  rssi,
  button,
  pressure,
  raw,
}
